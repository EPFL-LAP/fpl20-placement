"""A simple script that preprocesses the timing graphs and pickles
them for future use. The process is very slow at the moment, because
it is considered a one-time operation not worthy of optimization.
"""

import networkx as nx
import pickle
import os

from parsers import PlacementTimingGraph, parse_bles
from feeder import TimingGraph

benchmarks = [\
              "bgm",\
              "blob_merge",\
              "boundtop",\
              "ch_intrinsics",\
              "diffeq1",\
              "diffeq2",\
              "LU8PEEng",\
              "mkDelayWorker32B",\
              "mkPktMerge",\
              "mkSMAdapter4B",\
              "or1200",\
              "raygentop",\
              "sha",\
              "stereovision0",\
              "stereovision1",\
              "stereovision2",\
             ]

seeds = [50936, 25124, 43033, 5300, 19225]
#Generated by random.randint(1, 65536) on 16.08.19 at 19:10

arc = "k6_N10_mem32K_40nm.xml"
import_dir = "import_dir/"
benchmark_dir = "benchmarks/" 

for benchmark in benchmarks:
    for seed in seeds:
        print(benchmark, seed)
        blif_file = benchmark + ".blif"
        net_file = benchmark + ".net"
        tg_file = "final_placement_timing_graph.echo"
        grid_type_file = "grid_types.dump"
        grid_delay_file = "lookup_dump.echo"
        
        relevant_files = [net_file, tg_file, grid_type_file, grid_delay_file]
        
        RERUN_VPR = True
        
        if RERUN_VPR:
            wd = os.getcwd()
            res_dir = import_dir + benchmark + '/'
            os.system("mkdir " + res_dir)
            res_dir += str(seed) + '/'
            os.system("mkdir " + res_dir)
            os.system("cp " + benchmark_dir + blif_file + ' ' + res_dir)
            os.system("cp " + arc + ' ' + res_dir)
            os.chdir(res_dir)
            os.system("vtr7-devel " + arc + ' ' + blif_file + " --pack --place"\
                      + " --seed %d --nodisp --echo_file on > /dev/null" % seed)
            for f in os.listdir('.'):
                if not f in relevant_files:
                    os.system("rm -f " + f)
            net_file = res_dir + net_file
            tg_file = res_dir + tg_file
            os.chdir(wd)
            
        bles = parse_bles(net_file)
        
        tg = PlacementTimingGraph(tg_file, net_file)
        tg.parse_net(mem = True, mult = True, io = True)
        tg.parse_tg()
        tg.relabel_nodes()
        tg.merge_coords()
        
        ftg = TimingGraph(tg.tg, tg.blif_nodes.keys())
        ftg.merge_bles(bles)
        
        res_dir = import_dir + benchmark + '/' + str(seed) + '/'
        with open(res_dir + "ftg.pickle", "w") as dumpf:
            pickle.dump(ftg, dumpf)
